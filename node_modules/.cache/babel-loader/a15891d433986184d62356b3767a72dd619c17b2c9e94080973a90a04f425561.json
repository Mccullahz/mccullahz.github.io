{"ast":null,"code":"const regex = require('./regex.js');\nmodule.exports = BananaSlug;\nconst own = Object.hasOwnProperty;\nfunction BananaSlug() {\n  const self = this;\n  if (!(self instanceof BananaSlug)) return new BananaSlug();\n  self.reset();\n}\n\n/**\n * Generate a unique slug.\n * @param  {string} value String of text to slugify\n * @param  {boolean} [false] Keep the current case, otherwise make all lowercase\n * @return {string}       A unique slug string\n */\nBananaSlug.prototype.slug = function (value, maintainCase) {\n  const self = this;\n  let slug = slugger(value, maintainCase === true);\n  const originalSlug = slug;\n  while (own.call(self.occurrences, slug)) {\n    self.occurrences[originalSlug]++;\n    slug = originalSlug + '-' + self.occurrences[originalSlug];\n  }\n  self.occurrences[slug] = 0;\n  return slug;\n};\n\n/**\n * Reset - Forget all previous slugs\n * @return void\n */\nBananaSlug.prototype.reset = function () {\n  this.occurrences = Object.create(null);\n};\nfunction slugger(string, maintainCase) {\n  if (typeof string !== 'string') return '';\n  if (!maintainCase) string = string.toLowerCase();\n  return string.replace(regex, '').replace(/ /g, '-');\n}\nBananaSlug.slug = slugger;","map":{"version":3,"names":["regex","require","module","exports","BananaSlug","own","Object","hasOwnProperty","self","reset","prototype","slug","value","maintainCase","slugger","originalSlug","call","occurrences","create","string","toLowerCase","replace"],"sources":["/home/zyguythearchguy/code/mccullahz.github.io/node_modules/github-slugger/index.js"],"sourcesContent":["const regex = require('./regex.js')\n\nmodule.exports = BananaSlug\n\nconst own = Object.hasOwnProperty\n\nfunction BananaSlug () {\n  const self = this\n\n  if (!(self instanceof BananaSlug)) return new BananaSlug()\n\n  self.reset()\n}\n\n/**\n * Generate a unique slug.\n * @param  {string} value String of text to slugify\n * @param  {boolean} [false] Keep the current case, otherwise make all lowercase\n * @return {string}       A unique slug string\n */\nBananaSlug.prototype.slug = function (value, maintainCase) {\n  const self = this\n  let slug = slugger(value, maintainCase === true)\n  const originalSlug = slug\n\n  while (own.call(self.occurrences, slug)) {\n    self.occurrences[originalSlug]++\n    slug = originalSlug + '-' + self.occurrences[originalSlug]\n  }\n\n  self.occurrences[slug] = 0\n\n  return slug\n}\n\n/**\n * Reset - Forget all previous slugs\n * @return void\n */\nBananaSlug.prototype.reset = function () {\n  this.occurrences = Object.create(null)\n}\n\nfunction slugger (string, maintainCase) {\n  if (typeof string !== 'string') return ''\n  if (!maintainCase) string = string.toLowerCase()\n  return string.replace(regex, '').replace(/ /g, '-')\n}\n\nBananaSlug.slug = slugger\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAY,CAAC;AAEnCC,MAAM,CAACC,OAAO,GAAGC,UAAU;AAE3B,MAAMC,GAAG,GAAGC,MAAM,CAACC,cAAc;AAEjC,SAASH,UAAUA,CAAA,EAAI;EACrB,MAAMI,IAAI,GAAG,IAAI;EAEjB,IAAI,EAAEA,IAAI,YAAYJ,UAAU,CAAC,EAAE,OAAO,IAAIA,UAAU,CAAC,CAAC;EAE1DI,IAAI,CAACC,KAAK,CAAC,CAAC;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAL,UAAU,CAACM,SAAS,CAACC,IAAI,GAAG,UAAUC,KAAK,EAAEC,YAAY,EAAE;EACzD,MAAML,IAAI,GAAG,IAAI;EACjB,IAAIG,IAAI,GAAGG,OAAO,CAACF,KAAK,EAAEC,YAAY,KAAK,IAAI,CAAC;EAChD,MAAME,YAAY,GAAGJ,IAAI;EAEzB,OAAON,GAAG,CAACW,IAAI,CAACR,IAAI,CAACS,WAAW,EAAEN,IAAI,CAAC,EAAE;IACvCH,IAAI,CAACS,WAAW,CAACF,YAAY,CAAC,EAAE;IAChCJ,IAAI,GAAGI,YAAY,GAAG,GAAG,GAAGP,IAAI,CAACS,WAAW,CAACF,YAAY,CAAC;EAC5D;EAEAP,IAAI,CAACS,WAAW,CAACN,IAAI,CAAC,GAAG,CAAC;EAE1B,OAAOA,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACAP,UAAU,CAACM,SAAS,CAACD,KAAK,GAAG,YAAY;EACvC,IAAI,CAACQ,WAAW,GAAGX,MAAM,CAACY,MAAM,CAAC,IAAI,CAAC;AACxC,CAAC;AAED,SAASJ,OAAOA,CAAEK,MAAM,EAAEN,YAAY,EAAE;EACtC,IAAI,OAAOM,MAAM,KAAK,QAAQ,EAAE,OAAO,EAAE;EACzC,IAAI,CAACN,YAAY,EAAEM,MAAM,GAAGA,MAAM,CAACC,WAAW,CAAC,CAAC;EAChD,OAAOD,MAAM,CAACE,OAAO,CAACrB,KAAK,EAAE,EAAE,CAAC,CAACqB,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;AACrD;AAEAjB,UAAU,CAACO,IAAI,GAAGG,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}